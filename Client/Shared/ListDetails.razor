@inject StateContainer StateContainer

<div>
  <div id="listDetails" class="addbar flex is-horizontally-centered">
    <div class="container main">
      <EditForm Model="@StateContainer.LinkBundle">
        <div class="columns">
          <div class="column">
            <label class="control-label" for="vanityUrl">Link Title</label>
            @if (String.IsNullOrEmpty(StateContainer.LinkBundle.Id))
            {
              <InputText @bind-Value="StateContainer.LinkBundle.VanityUrl" class="input is-large has-tooltip"
                id="vanityUrl" type="text" @oninput="eventArgs => CheckVanityUrl(eventArgs.Value.ToString())"
                title="Optional: Enter a name for this list. The name will become the URL (i.e. my-list becomes theurlist.com/my-list). If you leave this box blank, we'll generate a random name for you." />
            }
            else
            {
              <InputText @bind-Value="StateContainer.LinkBundle.VanityUrl" disabled class="input is-large" />
            }
            <div id="errorMessage">
              <ValidationMessage class="has-text-danger is-font-weight-medium"
                ParsingErrorMessage="@vanityValidationErrorMessage" For="() => StateContainer.LinkBundle.VanityUrl" />
            </div>
            <p id="liveLink" v-if="listIsPublished">
              <a :href="liveLink" target="_new">
                {{ liveLink }}
              </a>
            </p>
          </div>
          <div class="column">
            <label class="control-label" for="description">Description</label>
            <textarea rows="2" title="Optional: The description will show up as the title on your public list page."
              class="textarea has-fixed-size" id="description" v-model="currentList.description"></textarea>
          </div>
          <div class="column is-narrow">
            <label class="control-label is-hidden-mobile" for>&nbsp;</label>
            <button id="publishButton" :disabled="!canSave"
              class="button is-primary is-large has-text-white has-text-weight-bold" @click="saveList">
              Publish
            </button>
          </div>
        </div>
      </EditForm>
    </div>
  </div>
</div>

@code {
  EditContext editContext;

  protected override void OnInitialized()
  {
    base.OnInitialized();
    editContext = new EditContext(StateContainer.LinkBundle);
  }

  private string vanityValidationErrorMessage = "";

  private void CheckVanityUrl(string vanityUrl)
  {
    var regex = new System.Text.RegularExpressions.Regex(@"^(^$|[a-zA-Z0-9_\-])+$");
    if (!regex.IsMatch(vanityUrl))
    {
      vanityValidationErrorMessage = "The vanity URL can only contain letters and numbers.";
    }
    else
    {
      vanityValidationErrorMessage = "";
    }
  }
}