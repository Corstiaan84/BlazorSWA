@using BlazorApp.Client.Utils
@inject StateContainer StateContainer

<div>
  <div id="listDetails" class="addbar flex is-horizontally-centered">
    <div class="container main">
      <EditForm Model="@Model" OnValidSubmit="@OnValidSubmit">
        <CustomValidation @ref="customValidation" />
        <div class="columns">
          <div class="column">
            <label class="control-label" for="vanityUrl">Link Title</label>
            @if (String.IsNullOrEmpty(StateContainer.LinkBundle.Id))
            {
              <InputText @bind-Value="Model" Class=@($"input is-large has-tooltip {ValidClass}") title=" Optional: Enter a name for this list. The name will become the URL (i.e. my-list becomes
                theurlist.com/my-list). If you leave this box blank, we'll generate a random name for you."
                @oninput="OnInput" @onblur="OnBlur" />
              <ValidationSummary class="has-text-danger is-font-weight-medium mt-2" />
              @* <ValidationMessage class="has-text-danger is-font-weight-medium"
            ParsingErrorMessage="The vanity is not valie" For="() => Model" /> *@
            }
            <p id="liveLink" v-if="listIsPublished">
              <a :href="liveLink" target="_new">
              </a>
            </p>
          </div>
          <div class="column">
            <label class="control-label" for="description">Description</label>
            <textarea rows="2" title="Optional: The description will show up as the title on your public list page."
              class="textarea has-fixed-size" id="description" v-model="currentList.description"></textarea>
          </div>
          <div class="column is-narrow">
            <label class="control-label is-hidden-mobile" for>&nbsp;</label>
            <button type="submit" id="publishButton" :disabled="!canSave"
              class="button is-primary is-large has-text-white has-text-weight-bold">
              Publish
            </button>
          </div>
        </div>
      </EditForm>
    </div>
  </div>
</div>

@code {
  private CustomValidation? customValidation;

  public string Model { get; set; } = "";

  private string ValidClass { get; set; } = "valid";

  private Debouncer debouncer = new Debouncer(300);

  private void OnValidSubmit()
  {
    Console.WriteLine("OnValidSubmit");
  }

  private void OnBlur()
  {
    ValidateVanityUrl();
  }

  private void OnInput(ChangeEventArgs e)
  {
    @* Model = e.Value.ToString(); *@
    ValidateVanityUrl();
  }
  private void ValidateVanityUrl()
  {
    customValidation?.ClearErrors();
    ValidClass = "valid";

    var errors = new Dictionary<string, List<string>>();

    var regex = new System.Text.RegularExpressions.Regex(@"^(^$|[a-zA-Z0-9_\-])+$");
    if (!regex.IsMatch(Model))
    {
      errors.Add(nameof(Model), new() { "Only letters, numbers and dashes please" });
    }

    if (errors.Any())
    {
      customValidation?.DisplayErrors(errors);
      ValidClass = "invalid";
    }

    StateHasChanged();
  }
}