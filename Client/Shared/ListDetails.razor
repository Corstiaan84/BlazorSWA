@using BlazorApp.Client.Utils
@using BlazorApp.Shared
@inject StateContainer StateContainer

<div>
  <div id="listDetails" class="addbar flex is-horizontally-centered">
    <div class="container main">
      <div class="columns">
        <div class="column">
          <label class="control-label" for="vanityUrl">Link Title</label>
          <input @bind="StateContainer.LinkBundle.VanityUrl" Class=@($"input is-large has-tooltip { customValidator.validationErrorClass }")
            title=" Optional: Enter a name for this list. The name will become the URL (i.e. my-list becomes
                theurlist.com/my-list). If you leave this box blank, we'll generate a random name for you."
            @oninput="ValidateVanityUrl" />
          <CustomValidationMessage customValidator="customValidator" />
          <p id="liveLink" v-if="listIsPublished">
            <a :href="liveLink" target="_new">
            </a>
          </p>
        </div>
        <div class="column">
          <label class="control-label" for="description">Description</label>
          <textarea rows="2" title="Optional: The description will show up as the title on your public list page."
            class="textarea has-fixed-size" id="description" v-model="currentList.description"></textarea>
        </div>
        <div class="column is-narrow">
          <label class="control-label is-hidden-mobile" for>&nbsp;</label>
          <button type="submit" id="publishButton" disabled="@PublishDisabled(customValidator.Invalid)"
            class="button is-primary is-large has-text-white has-text-weight-bold" @onclick="PublishLinkBundle">
            Publish
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

@code {

  private Debouncer debouncer = new Debouncer(300);
  private CustomValidator customValidator = new CustomValidator();

  bool PublishDisabled(bool invalid) {
    if (invalid) return true;
    if (String.IsNullOrEmpty(StateContainer.LinkBundle.VanityUrl)) return true;

    return false;
  }
  
  private void ValidateVanityUrl(ChangeEventArgs e)
  {
    var vanityUrl = e.Value?.ToString();
    StateContainer.LinkBundle.VanityUrl = vanityUrl;

    // reset the validator
    customValidator.Reset();

    // check to see if the vanity url contains invalid characters
    customValidator.ValidateVanityURLChars(vanityUrl);
    if (customValidator.Invalid) return;

    debouncer.Debounce(() =>
    {
      // the characters are valid, so now check to see if the vanity url is already in use
      //if (await VanityUrlIsTaken(vanityUrl)) return;
    });
  }

  // calls the API to see if the vanity is stil available for use
  /* private async Task<bool> VanityUrlIsTaken(string vanityUrl) {
    Console.WriteLine("Checking availability...");
    return false;
  } */

  private void PublishLinkBundle()
  {
    if (customValidator.Valid)
    {
      Console.WriteLine("Publishing...");
    }
  }
}