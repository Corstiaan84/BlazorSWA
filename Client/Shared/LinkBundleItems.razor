@using BlazorApp.Shared

@inject StateContainer StateContainer
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@implements IDisposable

<div id="linkBundle">
  @foreach (var link in StateContainer.LinkBundle.Links)
  {
    <div class="link-item" @key="link.Id">
      <BundleItemEditable newLink="link" OnDeleteLink="@DeleteLink" />
    </div>
  }
</div>

@code {
  private DotNetObjectReference<LinkBundleItems>? selfReference;

  protected override void OnInitialized()
  {
    StateContainer.OnChange += StateHasChanged;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      selfReference = DotNetObjectReference.Create(this);
      await JS.InvokeAsync<object>("THEURLIST.sortable.init", "linkBundle", selfReference);
    }
  }

  int GetIndex(Link link)
  {
    return StateContainer.LinkBundle.Links.FindIndex(x => x.Id == link.Id);
  }

  private void DeleteLink(Link link)
  {
    StateContainer.DeleteLinkFromBundle(link);
  }

  [JSInvokable]
  public void Drop(int oldIndex, int newIndex)
  {
    StateContainer.ReorderLinks(oldIndex, newIndex);
  }

  public void Dispose() => selfReference?.Dispose();
}
