@using System.Collections.Generic
@using System.Diagnostics.CodeAnalysis

@inject IJSRuntime JS
@inject StateContainer StateContainer

@typeparam T

<div id="@Id">
  @foreach (var item in Items)
  {
    @if (SortableItemTemplate is not null)
    {
      @SortableItemTemplate(item)
    }
  }
</div>

@code {

  [Parameter]
  public RenderFragment<T>? SortableItemTemplate { get; set; }

  [Parameter, AllowNull]
  public List<T> Items { get; set; }

  [Parameter]
  public EventCallback<(int oldIndex, int newIndex)> OnUpdate { get; set; }

  private string Id = $"sortable-list-{Guid.NewGuid().ToString().Substring(0, 5)}";

  private DotNetObjectReference<SortableList<T>>? selfReference;

  protected override void OnInitialized()
  {
    StateContainer.OnChange += StateHasChanged;
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      selfReference = DotNetObjectReference.Create(this);
      var module = await JS.InvokeAsync<IJSObjectReference>("import", "./Shared/SortableList.razor.js");
      await module.InvokeAsync<string>("init", Id, selfReference);
    }
  }

  [JSInvokable]
  public void Drop(int oldIndex, int newIndex)
  {
    // invoke the OnUpdate event passing in the oldIndex and the newIndex
    OnUpdate.InvokeAsync((oldIndex, newIndex));
  }

  public void Dispose() => selfReference?.Dispose();
}
