@using BlazorApp.Shared
@inject HttpContainer HttpContainer
@inject StateContainer StateContainer

<EditForm Model="@Model" OnValidSubmit="@OnValidSubmit" class="mb-6">
  <DataAnnotationsValidator />
  <p>Enter a link and press enter</p>
  <InputText @ref="newLinkInput" class="input is-large is-size-2" @bind-Value="Model!.Url" id="newLink"
    placeholder="http://example.com" ParsingErrorMessage="That doesn't look like a valid URL" />
  <ValidationMessage class="has-text-danger is-font-weight-medium mt-2" For="() => Model.Url" />
</EditForm>

@code {
  private InputText? newLinkInput;

  public Link? Model { get; set; }

  protected override void OnInitialized() => Model ??= new();

  [Parameter]
  public EventCallback<Link> OnNewLinkAdded { get; set; }

  private async Task OnValidSubmit()
  {
    var link = new Link
      {
        Url = Model!.Url!
      };

    await OnNewLinkAdded.InvokeAsync(link);
    Model.Url = null;
    await newLinkInput!.Element!.Value.FocusAsync();
    await UpdateLink(link);
    await InvokeAsync(StateHasChanged);
  }

  private async Task UpdateLink(Link link)
  {
    try
    {
      var response = await HttpContainer.PostAsync<Link>("api/oginfo", link);

      // If the request fails just return
      if (response != null)
      {
        // call statecontainer updatelink
        StateContainer.UpdateLinkInBundle(link, response.Data);
      }
    }
    catch (Exception e)
    {
      // We failed to get the OG info, but we can still add the link, so
      // swallow the error
      Console.WriteLine($"Error getting OG info: {e}");
    }
  }
}