@page "/s/edit"
@using BlazorApp.Shared

@inject StateContainer StateContainer
@inject HttpClient Http

<ListDetails></ListDetails>
<div class="container main content">
  <NewLink OnNewLinkAdded="@NewLinkAdded"></NewLink>
  @if (StateContainer.LinkBundle.Links.Count != 0)
  {
    <div id="linkHeader" class="columns is-mobile is-vcentered is-gapless">
      <div class="column">
        <h3 class="has-text-primary is-size-3 has-text-weight-medium">
          Links
        </h3>
      </div>
      <div class="column">
        <span class="is-pulled-right">Drag links to re-order</span>
      </div>
    </div>
    <SortableList Items="@StateContainer.LinkBundle.Links" Context="link" OnUpdate="@SortList">
      <SortableItemTemplate>
        <div class="link-item" @key="link.Id">
          <BundleItemEditable newLink="@link" OnDeleteLink="@DeleteLink"></BundleItemEditable>
        </div>
      </SortableItemTemplate>
    </SortableList>
    @if (StateContainer.LinkBundle.IsPublished)
    {
      <button id="deleteButton" class="button is-large is-danger has-text-white is-fullwidth" @onclick="ShowDeleteModal">
        Delete This List
      </button>
      <ModalDelete @ref="modalDelete"></ModalDelete>
    }
  }
</div>

@code {

  private ModalDelete? modalDelete;

  protected override void OnInitialized()
  {
    // if the linkbundle is already published and there is no user, reset the link bundle
    if (StateContainer.LinkBundle.IsPublished && StateContainer.User == null)
    {
      StateContainer.LinkBundle = new LinkBundle();
    }

    StateContainer.OnChange += StateHasChanged;
  }

  private void NewLinkAdded(Link link)
  {
    StateContainer.AddLinkToBundle(link);
  }

  private void ShowDeleteModal()
  {
    modalDelete?.Show();
  }

  private void DeleteLink(Link link)
  {
    StateContainer.DeleteLinkFromBundle(link);
  }

  private void SortList((int oldIndex, int newIndex) indices)
  {
    var (oldIndex, newIndex) = indices;
    StateContainer.ReorderLinks(oldIndex, newIndex);
  }
}
